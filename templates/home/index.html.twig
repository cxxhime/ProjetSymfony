{% extends 'base.html.twig' %}

{% block title %}Fil d'actu{% endblock %}

{% block body %}
    {# Configuration des 4 utilisateurs #}
    {% set postUsers = [
        { name: 'Hyun', image: 'user1.jpg' },
        { name: 'Jun', image: 'user2.jpg' },
        { name: 'Océane', image: 'user3.jpg' },
        { name: 'Ava', image: 'user4.jpg' }
    ] %}

    {% for post in posts %}
        {% set userIndex = loop.index0 % 4 %}
        {% set postIndex = loop.index0 % 8 %}
        
        <div class="post-card">
            <div class="post-header">
                <img src="{{ asset('images/' ~ postUsers[userIndex].image) }}" 
                     alt="{{ postUsers[userIndex].name }}" 
                     class="pp">
                <span>{{ postUsers[userIndex].name }}</span>
            </div>

            <div class="post-content">
                {% if post.description %}
                    <p class="post-description">{{ post.description }}</p>
                {% endif %}
                
       
                <img src="{{ asset('images/post' ~ (postIndex + 1) ~ '.jpg') }}" 
                     alt="Post de {{ postUsers[userIndex].name }}" 
                     class="post-img"
                     onerror="this.onerror=null;this.src='{{ asset('images/post' ~ random(1,8) ~ '.jpg') }}'">
                
        
                <div class="post-info">
                    <span class="post-date">{{ post.createdAt|date('d/m/Y à H:i') }}</span>
                </div>

                <div class="post-actions">
                    <div class="like-section">
                        <button class="like-button {% if app.user and post.isLikedByUser(app.user) %}liked{% endif %}" data-post-id="{{ post.id }}">
                            <i class="fa-{% if app.user and post.isLikedByUser(app.user) %}solid{% else %}regular{% endif %} fa-heart"></i>
                        </button>
                        <span class="likes-count" data-post-id="{{ post.id }}">{{ post.likes|length }}</span> likes
                    </div>
                    <div class="comment-section">
                        <i class="fa-regular fa-comment comment-toggle" data-post-id="{{ post.id }}"></i>
                        <span class="comments-count">{{ post.comments|length }}</span> commentaires
                    </div>
                </div>

                {# Section commentaires - Version originale rétablie #}
                <div class="comments-container" id="comments-{{ post.id }}">
                    <h4>Commentaires <span class="comments-count">({{ post.comments|length }})</span></h4>
                    
                    {% for comment in post.comments|slice(-3) %}
                        <div class="comment">
                            <div class="comment-header">
                                {% if comment.user.profilePicture %}
                                    <img src="{{ asset('uploads/profile_pictures/' ~ comment.user.profilePicture) }}" alt="pp" class="comment-pp">
                                {% else %}
                                    <img src="{{ asset('images/user.jpg') }}" alt="pp" class="comment-pp">
                                {% endif %}
                                <span class="comment-username">{{ comment.user.username }}</span>
                                <span class="comment-date">{{ comment.createdAt|date('d/m/Y à H:i') }}</span>
                            </div>
                            <div class="comment-content">
                                <p>{{ comment.content }}</p>
                            </div>
                        </div>
                    {% else %}
                        <p class="no-comments">Aucun commentaire pour l'instant.</p>
                    {% endfor %}
                    
                    {% if post.comments|length > 3 %}
                        <button class="show-more-comments" data-post-id="{{ post.id }}">
                            Voir les {{ post.comments|length - 3 }} commentaires précédents
                        </button>
                        <div class="hidden-comments" id="hidden-comments-{{ post.id }}" style="display:none;">
                            {% for comment in post.comments|slice(0, -3) %}
                                <div class="comment">
                                    <div class="comment-header">
                                        {% if comment.user.profilePicture %}
                                            <img src="{{ asset('uploads/profile_pictures/' ~ comment.user.profilePicture) }}" alt="pp" class="comment-pp">
                                        {% else %}
                                            <img src="{{ asset('images/user.jpg') }}" alt="pp" class="comment-pp">
                                        {% endif %}
                                        <span class="comment-username">{{ comment.user.username }}</span>
                                        <span class="comment-date">{{ comment.createdAt|date('d/m/Y à H:i') }}</span>
                                    </div>
                                    <div class="comment-content">
                                        <p>{{ comment.content }}</p>
                                    </div>
                                </div>
                            {% endfor %}
                        </div>
                    {% endif %}
                    
                    <form action="{{ path('post_comment', {'id': post.id}) }}" method="post" class="comment-form">
                        <input type="text" name="content" placeholder="Ajouter un commentaire..." required>
                        <button type="submit">Envoyer</button>
                    </form>
                </div>
            </div>
        </div>
    {% else %}
        <p>Aucun post à afficher.</p>
    {% endfor %}
{% endblock %}

{% block javascripts %}
{{ parent() }}
<script>
document.addEventListener('DOMContentLoaded', function() {
    // Toggle des commentaires
    const commentToggles = document.querySelectorAll('.comment-toggle');
    commentToggles.forEach(toggle => {
        toggle.addEventListener('click', function() {
            const postId = this.getAttribute('data-post-id');
            const commentsContainer = document.getElementById('comments-' + postId);
            commentsContainer.classList.toggle('show');
        });
    });
    

    const likeButtons = document.querySelectorAll('.like-button');
    likeButtons.forEach(button => {
        button.addEventListener('click', function(e) {
            e.preventDefault();
            const postId = this.getAttribute('data-post-id');
            const url = '/post/' + postId + '/like';
            
            fetch(url, {
                method: 'POST',
                headers: {
                    'X-Requested-With': 'XMLHttpRequest'
                }
            })
            .then(response => response.json())
            .then(data => {
                console.log('Réponse du serveur:', data);
                if (data.success) {
                
                    const likesCount = document.querySelector(`.likes-count[data-post-id="${postId}"]`);
                    likesCount.textContent = data.likesCount;
                    
                
                    const icon = this.querySelector('i');
                    if (data.isLiked) {
                        icon.classList.replace('fa-regular', 'fa-solid');
                        this.classList.add('liked');
                    } else {
                        icon.classList.replace('fa-solid', 'fa-regular');
                        this.classList.remove('liked');
                    }
                } else {
                    // Gérer l'erreur (par exemple, rediriger vers la page de connexion)
                    if (data.message === 'Vous devez être connecté') {
                        window.location.href = '/login';
                    }
                }
            })
            .catch(error => {
                console.error('Erreur lors du like:', error);
            });
        });
    });
    
    const commentForms = document.querySelectorAll('.comment-form');
    commentForms.forEach(form => {
        form.addEventListener('submit', function(e) {
            e.preventDefault();
            const formData = new FormData(this);
            
            fetch(this.action, {
                method: 'POST',
                body: formData,
                headers: {
                    'X-Requested-With': 'XMLHttpRequest'
                }
            })
            .then(response => response.json())
            .then(data => {
                console.log('Réponse du serveur pour le commentaire:', data);
                if (data.success) {
                
                    const noComments = this.closest('.comments-container').querySelector('.no-comments');
                    if (noComments) {
                        noComments.style.display = 'none';
                    }
                    
                    
                    const commentsContainer = this.closest('.comments-container');
                    
                
                    const tempDiv = document.createElement('div');
                    tempDiv.innerHTML = data.html;
                    const newComment = tempDiv.firstChild;
                    
                    
                    commentsContainer.insertBefore(newComment, this);
                    
                    
                    this.reset();
                    
                    const commentsCount = this.closest('.post-card').querySelector('.comments-count');
                    commentsCount.textContent = data.commentCount;
                }
            })
            .catch(error => {
                console.error('Erreur lors de l\'ajout du commentaire:', error);
            });
        });
    });
});
</script>
{% endblock %}